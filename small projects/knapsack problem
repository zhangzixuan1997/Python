{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# We use the porfolio method : find the best bag size for each instance "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>40</th>\n",
       "      <th>41</th>\n",
       "      <th>42</th>\n",
       "      <th>43</th>\n",
       "      <th>44</th>\n",
       "      <th>45</th>\n",
       "      <th>46</th>\n",
       "      <th>47</th>\n",
       "      <th>48</th>\n",
       "      <th>49</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>98.00</td>\n",
       "      <td>113.00</td>\n",
       "      <td>108.00</td>\n",
       "      <td>66.00</td>\n",
       "      <td>95.00</td>\n",
       "      <td>91.00</td>\n",
       "      <td>35.00</td>\n",
       "      <td>49.00</td>\n",
       "      <td>27.00</td>\n",
       "      <td>91.00</td>\n",
       "      <td>...</td>\n",
       "      <td>16.00</td>\n",
       "      <td>20.00</td>\n",
       "      <td>67.00</td>\n",
       "      <td>77.00</td>\n",
       "      <td>9.00</td>\n",
       "      <td>26.00</td>\n",
       "      <td>3.00</td>\n",
       "      <td>117.00</td>\n",
       "      <td>60.00</td>\n",
       "      <td>49.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>66.61</td>\n",
       "      <td>190.66</td>\n",
       "      <td>134.96</td>\n",
       "      <td>67.32</td>\n",
       "      <td>65.48</td>\n",
       "      <td>27.08</td>\n",
       "      <td>69.65</td>\n",
       "      <td>17.23</td>\n",
       "      <td>44.05</td>\n",
       "      <td>34.92</td>\n",
       "      <td>...</td>\n",
       "      <td>11.78</td>\n",
       "      <td>20.46</td>\n",
       "      <td>79.58</td>\n",
       "      <td>123.30</td>\n",
       "      <td>6.35</td>\n",
       "      <td>21.88</td>\n",
       "      <td>4.79</td>\n",
       "      <td>119.31</td>\n",
       "      <td>23.00</td>\n",
       "      <td>35.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>76.00</td>\n",
       "      <td>105.00</td>\n",
       "      <td>117.00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>107.00</td>\n",
       "      <td>109.00</td>\n",
       "      <td>66.00</td>\n",
       "      <td>77.00</td>\n",
       "      <td>112.00</td>\n",
       "      <td>6.00</td>\n",
       "      <td>...</td>\n",
       "      <td>34.00</td>\n",
       "      <td>58.00</td>\n",
       "      <td>122.00</td>\n",
       "      <td>33.00</td>\n",
       "      <td>7.00</td>\n",
       "      <td>23.00</td>\n",
       "      <td>76.00</td>\n",
       "      <td>18.00</td>\n",
       "      <td>93.00</td>\n",
       "      <td>93.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>120.69</td>\n",
       "      <td>58.57</td>\n",
       "      <td>67.50</td>\n",
       "      <td>3.61</td>\n",
       "      <td>145.38</td>\n",
       "      <td>83.47</td>\n",
       "      <td>47.31</td>\n",
       "      <td>101.94</td>\n",
       "      <td>116.52</td>\n",
       "      <td>3.89</td>\n",
       "      <td>...</td>\n",
       "      <td>10.07</td>\n",
       "      <td>24.08</td>\n",
       "      <td>157.83</td>\n",
       "      <td>36.92</td>\n",
       "      <td>7.00</td>\n",
       "      <td>18.11</td>\n",
       "      <td>102.58</td>\n",
       "      <td>24.18</td>\n",
       "      <td>98.03</td>\n",
       "      <td>129.91</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 50 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       0       1       2      3       4       5      6       7       8   \\\n",
       "0   98.00  113.00  108.00  66.00   95.00   91.00  35.00   49.00   27.00   \n",
       "1   66.61  190.66  134.96  67.32   65.48   27.08  69.65   17.23   44.05   \n",
       "2    0.00    0.00    0.00   0.00    0.00    0.00   0.00    0.00    0.00   \n",
       "3   76.00  105.00  117.00   4.00  107.00  109.00  66.00   77.00  112.00   \n",
       "4  120.69   58.57   67.50   3.61  145.38   83.47  47.31  101.94  116.52   \n",
       "\n",
       "      9   ...     40     41      42      43    44     45      46      47  \\\n",
       "0  91.00  ...  16.00  20.00   67.00   77.00  9.00  26.00    3.00  117.00   \n",
       "1  34.92  ...  11.78  20.46   79.58  123.30  6.35  21.88    4.79  119.31   \n",
       "2   0.00  ...   0.00   0.00    0.00    0.00  0.00   0.00    0.00    0.00   \n",
       "3   6.00  ...  34.00  58.00  122.00   33.00  7.00  23.00   76.00   18.00   \n",
       "4   3.89  ...  10.07  24.08  157.83   36.92  7.00  18.11  102.58   24.18   \n",
       "\n",
       "      48      49  \n",
       "0  60.00   49.00  \n",
       "1  23.00   35.33  \n",
       "2   0.00    0.00  \n",
       "3  93.00   93.00  \n",
       "4  98.03  129.91  \n",
       "\n",
       "[5 rows x 50 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np \n",
    "knapsack = pd.read_csv('Knapsack_Instances.csv',header=None,skip_blank_lines=False)\n",
    "knapsack = knapsack.fillna(0)\n",
    "knapsack.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Calculate the maximum value of the per instance\n",
    "def bag(n,c,w,p):\n",
    "    res=[[-1 for j in range(c+1)]for i in range(n+1)]\n",
    "    for j in range(c+1):\n",
    "        res[0][j]=0\n",
    "    for i in range(1,n+1):\n",
    "        for j in range(1,c+1):\n",
    "            res[i][j]=res[i-1][j]\n",
    "            if(j>=w[i-1]) and res[i-1][j-w[i-1]]+p[i-1]>res[i][j]:\n",
    "                res[i][j]=res[i-1][j-w[i-1]]+p[i-1]\n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Get the list of \"choose or not line\". \n",
    "def show(n,c,w,res):\n",
    "    choose = []\n",
    "    x=[False for i in range(n)]  \n",
    "    j=c  \n",
    "    for i in range(n,0,-1):  \n",
    "        if res[i][j]>res[i-1][j]:  \n",
    "            x[i-1]=True\n",
    "            j = j - w[i-1]   \n",
    "    for i in range(n):  \n",
    "        if x[i]:  \n",
    "            choose+=[1]\n",
    "        else:\n",
    "            choose+=[0]\n",
    "    return choose"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# each instance has 20 possible bagsize cause generally we can estimate the bagsize will below 120. \n",
    "# each bagsize will run through 100 uniform distributed bagsize. \n",
    "best_bags = []\n",
    "for i in range(0,1500,3):#run through 500 instances, i = 0,3,6,....1497 i/3 = 0,1,2....499\n",
    "    space = list(knapsack.loc[i][0:])\n",
    "    space = [int (i) for i in space]\n",
    "    reward = list(knapsack.loc[i+1][0:])\n",
    "    true_list = list(knapsack.loc[i+2][0:])\n",
    "    total_space_list = np.random.uniform(100,150,100)#Generate 100 teacher bags. \n",
    "    bags ={}\n",
    "    for bag_size in range(100,120):#列举20个 bagsize\n",
    "        reward_sum = 0 \n",
    "        for j in range(100):#老师会给的100个 bagsize \n",
    "            if bag_size <= total_space_list[j]:\n",
    "                matrix = bag(50,bag_size,space,reward) # 现在 matrix 是 51行，101列\n",
    "                reward_sum = reward_sum + matrix[-1][-1]#每一个 bagsize 的最大值\n",
    "        bags[bag_size]=reward_sum/100\n",
    "    best_bag = max(bags, key=bags.get) #这个 instance 最好的 bagsize\n",
    "    best_bags += [best_bag] # 500个 instance 最好的 bagsizes     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "import csv\n",
    "with open(\"abcd.csv\",\"w\") as csvfile:\n",
    "        writer = csv.writer(csvfile)\n",
    "        for i in range(0,1500,3):\n",
    "            # The bag size number should be : i/3\n",
    "            space = list(knapsack.loc[i][0:])\n",
    "            space = [int (i) for i in space] # first row of an instance\n",
    "            reward = list(knapsack.loc[i+1][0:])\n",
    "            matrix = bag(50,best_bags[int(i/3)],space,reward)\n",
    "            a = show(50,best_bags[int(i/3)],space,matrix)\n",
    "            writer.writerow(space)\n",
    "            writer.writerow(reward)\n",
    "            writer.writerow(a)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
